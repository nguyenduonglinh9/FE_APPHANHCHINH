"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ScrollViewIndicator = exports.FlatListIndicator = void 0;
var React = _interopRequireWildcard(require("react"));
var _ScrollIndicator = require("./ScrollIndicator");
var _functions = require("./functions");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/* eslint-disable react-native/no-inline-styles */
/**
 * @format
 */

const ScrollViewIndicator = props => {
  const {
    position = '',
    horizontal = false,
    persistentScrollbar = false,
    indStyle: {
      width = 5,
      ...indStyle
    } = {},
    scrollViewProps = {}
  } = props;
  return /*#__PURE__*/React.createElement(_ScrollIndicator.ScrollIndicator, {
    target: "ScrollView",
    targetProps: scrollViewProps,
    horizontal: horizontal,
    position: (0, _functions.getDefaultPosition)(horizontal, position),
    persistentScrollbar: persistentScrollbar,
    indStyle: {
      backgroundColor: 'grey',
      width,
      borderRadius: width / 2,
      ...indStyle
    }
  }, props.children);
};
exports.ScrollViewIndicator = ScrollViewIndicator;
const FlatListIndicator = props => {
  const {
    flatListProps,
    position = '',
    horizontal = false,
    persistentScrollbar = false,
    indStyle: {
      width = 5,
      ...indStyle
    } = {}
  } = props;
  return /*#__PURE__*/React.createElement(_ScrollIndicator.ScrollIndicator, {
    target: "FlatList",
    targetProps: flatListProps,
    horizontal: horizontal,
    position: (0, _functions.getDefaultPosition)(horizontal, position),
    persistentScrollbar: persistentScrollbar,
    indStyle: {
      backgroundColor: 'grey',
      width,
      borderRadius: width / 2,
      ...indStyle
    }
  });
};
exports.FlatListIndicator = FlatListIndicator;
//# sourceMappingURL=index.js.map