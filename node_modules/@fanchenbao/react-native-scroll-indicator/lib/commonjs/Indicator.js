"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Indicator = void 0;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/* eslint-disable react-native/no-inline-styles */
/**
 * @format
 */

const Indicator = props => {
  const {
    d,
    sc,
    horizontal,
    indSize,
    diff,
    inverted,
    locStyle,
    indStyle
  } = props;

  // interpolate the distance need to travel by the indicator to translateX or
  // translateY. Note that the max travel distance is diff
  const move = d.interpolate({
    inputRange: [0, diff],
    outputRange: inverted ? [diff, 0] : [0, diff],
    extrapolate: 'extend'
  });
  // interpolate the scale need to shrink by the indicator to scaleX or scaleY.
  // Note that the range of shrink scale is from 0 (completely shrunk,
  // invisible) to 1 (no shrink)
  const shrink = sc.interpolate({
    inputRange: [0, 1],
    outputRange: [0, 1],
    extrapolate: 'clamp'
  });
  return /*#__PURE__*/React.createElement(_reactNative.Animated.View, {
    style: {
      ...indStyle,
      ...locStyle,
      position: 'absolute',
      height: horizontal ? indStyle.width : indSize,
      width: horizontal ? indSize : indStyle.width,
      transform: horizontal ? [{
        translateX: move
      }, {
        scaleX: shrink
      }] : [{
        translateY: move
      }, {
        scaleY: shrink
      }]
    }
  });
};
exports.Indicator = Indicator;
//# sourceMappingURL=Indicator.js.map