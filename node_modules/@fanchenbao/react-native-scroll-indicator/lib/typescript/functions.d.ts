/**
 * Get default position when it is not supplied by the user
 * @param horizontal whether the indicator is horizontal
 * @param position desired position of the indicator, as a percentage of the
 * container. e.g. 20 means we want to place a vertical indicator's center line
 * at 20% of the container's width. If user has not specified it, it will have
 * the value of empty string.
 * @returns default position if it has not been supplied
 */
export declare const getDefaultPosition: (horizontal: boolean, position: string | number) => string | number;
/**
 * get the style for indicator's location.
 * @param horizontal whether the indicator is horizontal
 * @param position desired position of the indicator, as a percentage of the
 * container. e.g. 20 means we want to place a vertical indicator's center line
 * at 20% of the container's width.
 * @param orthSize the size of the content view orthogonal to that of the
 * scrolling direction. e.g. if the scrolling is vertical, orthSize is the
 * content view's width, otherwise height.
 * @param indGirth the girth of the indicator, which is width for vertical
 * indicator, or height for horizontal indicator
 * @returns the location style of the indicator, which includes a numeric value
 * for top, bottom, left, or right.
 */
export declare const getLocStyle: (horizontal: boolean, position: string | number, orthSize: number, indGirth: number) => {
    [x: string]: number;
    top?: undefined;
    left?: undefined;
} | {
    top: number;
    left?: undefined;
} | {
    left: number;
    top?: undefined;
};
//# sourceMappingURL=functions.d.ts.map